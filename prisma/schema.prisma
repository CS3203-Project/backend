// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), postgis(map: "postgis")]
}

model User {
  id                    String           @id @default(cuid())
  email                 String           @unique
  password              String
  firstName             String?
  lastName              String?
  phone                 String?
  address               String?
  bio                   String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  lastLoginAt           DateTime?
  socialmedia           String[]
  messagesSent          Message[]        @relation("MessagesSent")
  messagesReceived      Message[]        @relation("MessagesReceived")
  payments              Payment[]
  schedules             Schedule[]
  serviceProvider       ServiceProvider?
  notification          Notification[]
  customerReviewsWritten CustomerReview[] @relation("CustomerReviewReviewer")
  customerReviewsReceived CustomerReview[] @relation("CustomerReviewReviewee")
  writtenServiceReviews ServiceReview[] @relation("writtenServiceReviews")

  @@index([email])
  @@index([createdAt])
}

model Team {
  id                    String           @id @default(cuid())
  name                  String
  description           String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  
  // Relationships
  members               TeamMember[]
  tasks                 Task[]
  activities            Activity[]
  
  @@index([createdAt])
}

model TeamMember {
  id                    String           @id @default(cuid())
  userId                String
  teamId                String
  role                  TeamRole         @default(MEMBER)
  joinedAt              DateTime         @default(now())
  
  // Relationships
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  team                  Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Service {
  id          String          @id @default(cuid())
  providerId  String
  categoryId  String
  title       String?
  description String?
  price       Decimal         @db.Decimal(10, 2)
  currency    String          @default("RS")
  tags        String[]
  images      String[]
  videoUrl    String?
  isActive    Boolean         @default(true)
  workingTime String[]

  // Location fields
  latitude            Float?
  longitude           Float?
  address             String?
  city                String?
  state               String?
  country             String?
  postalCode          String?
  serviceRadiusKm     Float?              @default(10)
  locationLastUpdated DateTime?

  // Semantic search fields
  titleEmbedding       Unsupported("vector(768)")?
  descriptionEmbedding Unsupported("vector(768)")?
  tagsEmbedding        Unsupported("vector(768)")?
  combinedEmbedding    Unsupported("vector(768)")?
  embeddingUpdatedAt   DateTime?

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  payments    Payment[]
  schedules   Schedule[]
  conversations Conversation[]
  category    Category        @relation(fields: [categoryId], references: [id])
  provider    ServiceProvider @relation(fields: [providerId], references: [id])
  serviceReviews ServiceReview[]

  @@index([isActive])
  @@index([categoryId])
  @@index([providerId])
  @@index([createdAt])
  @@index([latitude, longitude])
  @@index([city])
  @@index([state])
}

model TaskAssignment {
  id                    String           @id @default(cuid())
  taskId                String
  userId                String
  assignedAt            DateTime         @default(now())
  assignedById          String?
  
  // Relationships
  task                  Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model TaskDependency {
  id                    String           @id @default(cuid())
  taskId                String           // The task that depends on another
  dependsOnTaskId       String           // The task it depends on
  createdAt             DateTime         @default(now())
  
  // Relationships
  task                  Task             @relation("DependentTask", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask         Task             @relation("DependencyTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dependsOnTaskId])
  @@index([taskId])
  @@index([dependsOnTaskId])
}

model Comment {
  id                    String           @id @default(cuid())
  content               String
  taskId                String
  userId                String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  
  // Relationships
  task                  Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String?
  to        String
  subject   String
  html      String
  emailType EmailType
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  isRead    Boolean   @default(false)
  user      User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([emailType])
  @@index([sentAt])
  @@map("notification")
}
  model Admin {
    id         Int    @id @default(autoincrement())
    username   String @unique
    password   String
    firstName  String
    lastName   String
  }

model Conversation {
  id         String    @id @default(uuid())
  userIds    String[]
  title      String?
  serviceId  String?
  service    Service?   @relation(fields: [serviceId], references: [id])
  messages   Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  fromId         String
  toId           String
  conversationId String
  createdAt      DateTime     @default(now())
  receivedAt     DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  from           User         @relation("MessagesSent", fields: [fromId], references: [id])
  to             User         @relation("MessagesReceived", fields: [toId], references: [id])
}

model CustomerReview {
  id         String   @id @default(cuid())
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewer   User     @relation("CustomerReviewReviewer", fields: [reviewerId], references: [id])
  reviewee   User     @relation("CustomerReviewReviewee", fields: [revieweeId], references: [id])
}

enum EmailType {
  BOOKING_CONFIRMATION              @map("BOOKING_CONFIRMATION")
  BOOKING_REMINDER                  @map("BOOKING_REMINDER")
  BOOKING_CANCELLATION_MODIFICATION @map("BOOKING_CANCELLATION_MODIFICATION")
  NEW_MESSAGE_OR_REVIEW             @map("NEW_MESSAGE_OR_REVIEW")
  OTHER                             @map("OTHER")

  @@map("EmailType")
}
