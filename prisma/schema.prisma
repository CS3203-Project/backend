generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis, vector]
}

model Admin {
  id        Int    @id @default(autoincrement())
  username  String @unique
  password  String
  firstName String
  lastName  String
}

model Category {
  id             String           @id
  name           String?
  slug           String           @unique
  description    String?
  parentId       String?
  Category       Category?        @relation("CategoryToCategory", fields: [parentId], references: [id])
  other_Category Category[]       @relation("CategoryToCategory")
  Service        Service[]
  ServiceRequest ServiceRequest[]

  @@index([slug])
}

model Company {
  id              String          @id
  providerId      String
  name            String?
  description     String?
  logo            String?
  address         String?
  contact         String?
  socialmedia     String[]
  ServiceProvider ServiceProvider @relation(fields: [providerId], references: [id])
}

model Conversation {
  id        String    @id
  userIds   String[]
  title     String?
  serviceId String?
  Service   Service?  @relation(fields: [serviceId], references: [id])
  Message   Message[]
}

model CustomerReview {
  id                                   String   @id
  reviewerId                           String
  revieweeId                           String
  rating                               Int
  comment                              String?
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime
  User_CustomerReview_revieweeIdToUser User     @relation("CustomerReview_revieweeIdToUser", fields: [revieweeId], references: [id])
  User_CustomerReview_reviewerIdToUser User     @relation("CustomerReview_reviewerIdToUser", fields: [reviewerId], references: [id])
}

model Message {
  id                        String       @id
  content                   String
  fromId                    String
  toId                      String
  conversationId            String
  createdAt                 DateTime     @default(now())
  receivedAt                DateTime?
  Conversation              Conversation @relation(fields: [conversationId], references: [id])
  User_Message_fromIdToUser User         @relation("Message_fromIdToUser", fields: [fromId], references: [id])
  User_Message_toIdToUser   User         @relation("Message_toIdToUser", fields: [toId], references: [id])
}

model Payment {
  id                    String          @id
  serviceId             String
  providerId            String
  userId                String
  gateway               String?         @default("stripe")
  chargeId              String?         @unique
  amount                Decimal         @db.Decimal(10, 2)
  currency              String          @default("usd")
  paidAt                DateTime?
  refundedAt            DateTime?
  failureReason         String?
  createdAt             DateTime        @default(now())
  metadata              Json?
  platformFee           Decimal?        @db.Decimal(10, 2)
  providerAmount        Decimal?        @db.Decimal(10, 2)
  stripePaymentIntentId String?         @unique
  updatedAt             DateTime
  status                PaymentStatus   @default(PENDING)
  ServiceProvider       ServiceProvider @relation(fields: [providerId], references: [id])
  Service               Service         @relation(fields: [serviceId], references: [id])
  User                  User            @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([stripePaymentIntentId])
}

model ProviderEarnings {
  id               String    @id
  providerId       String    @unique
  totalEarnings    Decimal   @default(0) @db.Decimal(10, 2)
  availableBalance Decimal   @default(0) @db.Decimal(10, 2)
  pendingBalance   Decimal   @default(0) @db.Decimal(10, 2)
  totalWithdrawn   Decimal   @default(0) @db.Decimal(10, 2)
  currency         String    @default("lkr")
  stripeAccountId  String?   @unique
  lastPayoutAt     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime

  @@index([providerId])
}

model Schedule {
  id                   String          @id
  serviceId            String
  providerId           String
  userId               String
  startTime            String
  endTime              String
  queueValue           Int?
  customerConfirmation Boolean         @default(false)
  providerConfirmation Boolean         @default(false)
  currency             String          @default("RS")
  serviceFee           Decimal?        @db.Decimal(10, 2)
  ServiceProvider      ServiceProvider @relation(fields: [providerId], references: [id])
  Service              Service         @relation(fields: [serviceId], references: [id])
  User                 User            @relation(fields: [userId], references: [id])
}

model Service {
  id                   String                 @id
  providerId           String
  categoryId           String
  title                String?
  description          String?
  price                Decimal                @db.Decimal(10, 2)
  currency             String                 @default("RS")
  tags                 String[]
  images               String[]
  isActive             Boolean                @default(true)
  workingTime          String[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  videoUrl             String?
  combinedEmbedding    Unsupported("vector")?
  descriptionEmbedding Unsupported("vector")?
  embeddingUpdatedAt   DateTime?
  tagsEmbedding        Unsupported("vector")?
  titleEmbedding       Unsupported("vector")?
  address              String?
  city                 String?
  country              String?
  latitude             Float?
  locationLastUpdated  DateTime?
  longitude            Float?
  postalCode           String?
  serviceRadiusKm      Float?                 @default(10)
  state                String?
  Conversation         Conversation[]
  Payment              Payment[]
  Schedule             Schedule[]
  Category             Category               @relation(fields: [categoryId], references: [id])
  ServiceProvider      ServiceProvider        @relation(fields: [providerId], references: [id])
  ServiceReview        ServiceReview[]

  @@index([categoryId])
  @@index([city])
  @@index([createdAt])
  @@index([isActive])
  @@index([latitude, longitude])
  @@index([providerId])
  @@index([state])
}

model ServiceProvider {
  id             String     @id
  userId         String     @unique
  bio            String?
  skills         String[]
  qualifications String[]
  logoUrl        String?
  averageRating  Float?
  totalReviews   Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  IDCardUrl      String
  isVerified     Boolean    @default(false)
  Company        Company[]
  Payment        Payment[]
  Schedule       Schedule[]
  Service        Service[]
  User           User       @relation(fields: [userId], references: [id])

  @@index([averageRating])
  @@index([createdAt])
  @@index([isVerified])
  @@index([userId])
}

model ServiceRequest {
  id                   String                 @id @default(uuid())
  userId               String
  title                String?
  description          String
  categoryId           String?
  latitude             Float?
  longitude            Float?
  address              String?
  city                 String?
  state                String?
  country              String?
  postalCode           String?
  locationLastUpdated  DateTime?
  // Semantic search fields
  titleEmbedding          Unsupported("vector(768)")?
  descriptionEmbedding    Unsupported("vector(768)")?
  combinedEmbedding       Unsupported("vector(768)")?
  embeddingUpdatedAt      DateTime?

  status                  ServiceRequestStatus @default(PENDING)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime   @updatedAt

  user                    User     @relation(fields: [userId], references: [id])
  category                Category? @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([createdAt])
  @@index([status])
  @@index([userId])
}

model ServiceReview {
  id         String   @id
  reviewerId String
  serviceId  String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  User       User     @relation(fields: [reviewerId], references: [id])
  Service    Service  @relation(fields: [serviceId], references: [id])
}

model User {
  id                                             String           @id
  email                                          String           @unique
  password                                       String
  role                                           String           @default("USER")
  isActive                                       Boolean          @default(false)
  firstName                                      String?
  lastName                                       String?
  phone                                          String?
  imageUrl                                       String?
  location                                       String?
  address                                        String?
  isEmailVerified                                Boolean          @default(false)
  createdAt                                      DateTime         @default(now())
  updatedAt                                      DateTime
  lastLoginAt                                    DateTime?
  socialmedia                                    String[]
  CustomerReview_CustomerReview_revieweeIdToUser CustomerReview[] @relation("CustomerReview_revieweeIdToUser")
  CustomerReview_CustomerReview_reviewerIdToUser CustomerReview[] @relation("CustomerReview_reviewerIdToUser")
  Message_Message_fromIdToUser                   Message[]        @relation("Message_fromIdToUser")
  Message_Message_toIdToUser                     Message[]        @relation("Message_toIdToUser")
  Payment                                        Payment[]
  Schedule                                       Schedule[]
  ServiceProvider                                ServiceProvider?
  ServiceRequest                                 ServiceRequest[]
  ServiceReview                                  ServiceReview[]
  notification                                   notification[]

  @@index([createdAt])
  @@index([email])
  @@index([isActive])
  @@index([role])
}

model notification {
  id        String    @id
  userId    String?
  to        String
  subject   String
  html      String
  emailType EmailType
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  isRead    Boolean   @default(false)
  User      User?     @relation(fields: [userId], references: [id])

  @@index([emailType])
  @@index([sentAt])
  @@index([userId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum EmailType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLATION_MODIFICATION
  NEW_MESSAGE_OR_REVIEW
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ServiceRequestStatus {
  PENDING
  MATCHED
  COMPLETED
  CLOSED
}
