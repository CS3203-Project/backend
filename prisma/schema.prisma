generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis, vector]
}

model User {
  id                      String           @id @default(cuid())
  email                   String           @unique
  password                String
  role                    String           @default("USER")
  isActive                Boolean          @default(true)
  firstName               String?
  lastName                String?
  phone                   String?
  imageUrl                String?
  location                String?
  address                 String?
  isEmailVerified         Boolean          @default(false)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  lastLoginAt             DateTime?
  socialmedia             String[]
  customerReviewsReceived CustomerReview[] @relation("CustomerReviewReviewee")
  customerReviewsWritten  CustomerReview[] @relation("CustomerReviewReviewer")
  messagesSent            Message[]        @relation("MessagesSent")
  messagesReceived        Message[]        @relation("MessagesReceived")
  payments                Payment[]
  schedules               Schedule[]
  serviceProvider         ServiceProvider?
  serviceRequests         ServiceRequest[]
  writtenServiceReviews   ServiceReview[]  @relation("writtenServiceReviews")
  notification            Notification[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
}

model ServiceProvider {
  id             String     @id @default(cuid())
  userId         String     @unique
  bio            String?
  skills         String[]
  qualifications String[]
  logoUrl        String?
  averageRating  Float?
  totalReviews   Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  IDCardUrl      String
  isVerified     Boolean    @default(false)
  companies      Company[]
  payments       Payment[]
  schedules      Schedule[]
  services       Service[]
  user           User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isVerified])
  @@index([averageRating])
  @@index([createdAt])
}

model Company {
  id          String          @id @default(cuid())
  providerId  String
  name        String?
  description String?
  logo        String?
  address     String?
  contact     String?
  socialmedia String[]
  provider    ServiceProvider @relation(fields: [providerId], references: [id])
}

model Category {
  id              String           @id @default(cuid())
  name            String?
  slug            String           @unique
  description     String?
  parentId        String?
  parent          Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]       @relation("CategoryHierarchy")
  services        Service[]
  serviceRequests ServiceRequest[]
}

model Service {
  id                   String                 @id @default(cuid())
  providerId           String
  categoryId           String
  title                String?
  description          String?
  price                Decimal                @db.Decimal(10, 2)
  currency             String                 @default("RS")
  tags                 String[]
  images               String[]
  isActive             Boolean                @default(true)
  workingTime          String[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  videoUrl             String?
  combinedEmbedding    Unsupported("vector")?
  descriptionEmbedding Unsupported("vector")?
  embeddingUpdatedAt   DateTime?
  tagsEmbedding        Unsupported("vector")?
  titleEmbedding       Unsupported("vector")?
  address              String?
  city                 String?
  country              String?
  latitude             Float?
  locationLastUpdated  DateTime?
  longitude            Float?
  postalCode           String?
  serviceRadiusKm      Float?                 @default(10)
  state                String?
  conversations        Conversation[]
  payments             Payment[]
  schedules            Schedule[]
  category             Category               @relation(fields: [categoryId], references: [id])
  provider             ServiceProvider        @relation(fields: [providerId], references: [id])
  serviceReviews       ServiceReview[]

  @@index([isActive])
  @@index([categoryId])
  @@index([providerId])
  @@index([createdAt])
  @@index([latitude, longitude])
  @@index([city])
  @@index([state])
}

model Schedule {
  id                   String          @id @default(cuid())
  serviceId            String
  providerId           String
  userId               String
  startTime            String
  endTime              String
  queueValue           Int?
  customerConfirmation Boolean         @default(false)
  providerConfirmation Boolean         @default(false)
  currency             String          @default("RS")
  serviceFee           Decimal?        @db.Decimal(10, 2)
  provider             ServiceProvider @relation(fields: [providerId], references: [id])
  service              Service         @relation(fields: [serviceId], references: [id])
  user                 User            @relation(fields: [userId], references: [id])
}

model Payment {
  id                    String          @id @default(cuid())
  serviceId             String
  providerId            String
  userId                String
  gateway               String?         @default("stripe")
  chargeId              String?         @unique
  amount                Decimal         @db.Decimal(10, 2)
  currency              String          @default("usd")
  paidAt                DateTime?
  refundedAt            DateTime?
  failureReason         String?
  createdAt             DateTime        @default(now())
  metadata              Json?
  platformFee           Decimal?        @db.Decimal(10, 2)
  providerAmount        Decimal?        @db.Decimal(10, 2)
  stripePaymentIntentId String?         @unique
  updatedAt             DateTime        @updatedAt
  status                PaymentStatus   @default(PENDING)
  provider              ServiceProvider @relation(fields: [providerId], references: [id])
  service               Service         @relation(fields: [serviceId], references: [id])
  user                  User            @relation(fields: [userId], references: [id])

  @@index([stripePaymentIntentId])
  @@index([status])
  @@index([createdAt])
}

model ProviderEarnings {
  id               String    @id @default(cuid())
  providerId       String    @unique
  totalEarnings    Decimal   @default(0) @db.Decimal(10, 2)
  availableBalance Decimal   @default(0) @db.Decimal(10, 2)
  pendingBalance   Decimal   @default(0) @db.Decimal(10, 2)
  totalWithdrawn   Decimal   @default(0) @db.Decimal(10, 2)
  currency         String    @default("lkr")
  stripeAccountId  String?   @unique
  lastPayoutAt     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([providerId])
}

model ServiceReview {
  id         String   @id @default(cuid())
  reviewerId String
  serviceId  String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewer   User     @relation("writtenServiceReviews", fields: [reviewerId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String?
  to        String
  subject   String
  html      String
  emailType EmailType
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  isRead    Boolean   @default(false)
  user      User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([emailType])
  @@index([sentAt])
  @@map("notification")
}

model Admin {
  id        Int    @id @default(autoincrement())
  username  String @unique
  password  String
  firstName String
  lastName  String
}

model Conversation {
  id        String    @id @default(uuid())
  userIds   String[]
  title     String?
  serviceId String?
  service   Service?  @relation(fields: [serviceId], references: [id])
  messages  Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  fromId         String
  toId           String
  conversationId String
  createdAt      DateTime     @default(now())
  receivedAt     DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  from           User         @relation("MessagesSent", fields: [fromId], references: [id])
  to             User         @relation("MessagesReceived", fields: [toId], references: [id])
}

model CustomerReview {
  id         String   @id @default(cuid())
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewee   User     @relation("CustomerReviewReviewee", fields: [revieweeId], references: [id])
  reviewer   User     @relation("CustomerReviewReviewer", fields: [reviewerId], references: [id])
}

model ServiceRequest {
  id                   String                 @id @default(uuid())
  userId               String
  title                String?
  description          String
  categoryId           String?
  latitude             Float?
  longitude            Float?
  address              String?
  city                 String?
  state                String?
  country              String?
  postalCode           String?
  locationLastUpdated  DateTime?
  titleEmbedding       Unsupported("vector")?
  descriptionEmbedding Unsupported("vector")?
  combinedEmbedding    Unsupported("vector")?
  embeddingUpdatedAt   DateTime?
  status               ServiceRequestStatus   @default(PENDING)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  category             Category?              @relation(fields: [categoryId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([createdAt])
  @@index([status])
  @@index([userId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum EmailType {
  BOOKING_CONFIRMATION              @map("BOOKING_CONFIRMATION")
  BOOKING_REMINDER                  @map("BOOKING_REMINDER")
  BOOKING_CANCELLATION_MODIFICATION @map("BOOKING_CANCELLATION_MODIFICATION")
  NEW_MESSAGE_OR_REVIEW             @map("NEW_MESSAGE_OR_REVIEW")
  OTHER                             @map("OTHER")

  @@map("EmailType")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ServiceRequestStatus {
  PENDING
  MATCHED
  COMPLETED
  CLOSED
}
